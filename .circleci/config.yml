version: 2.1

executors:

  python-docker: # declares a reusable executor
    parameters:
      version:
        description: "version tag"
        default: "3.8.12"
        type: string
    docker:
      - image: cimg/python:<<parameters.version>>

  java15-docker-image:
    docker:
      - image: cimg/openjdk:15.0.1

  ubuntu-1604-vm:
    machine:
      image: ubuntu-1604:201903-01


commands:

  install-tox:
    description: "Install tox automation tool with pip"
    steps:
      - run: pip install tox

  run-tests:
    description: "Type check code with mypy and run the test suite against the code"
    steps:
      - run:
          name: Equip machine with latest pip & wheel
          command: pip install -U pip wheel
      - install-tox
      - run:
          name: Run unittests & measure code coverage
          command: tox -e type,clean,build-n-test -vv

jobs:
  build-test-report:
    executor: python-docker
    steps:
      - checkout
      - run: python --version
      - run-tests
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts:
          path: test-results
      # currently the 'test-results' path (define above) must match the TEST_RESULTS_DIR env variable found in circleci web site
      - store_artifacts:
          path: .coverage
      - run:
          name: Manually install the python py package
          command: pip install py
      - run:
          name: Transform test results into 2 formats; html & xml
          command: tox -e format-report -vv
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
          destination: htmlcov
      - persist_to_workspace:
          root: .
          paths:
            - coverage.xml
            - .coverage
            - tox.ini
            - .git

  build-n-test:
    description: A job that runs the test suite against a python interpreter version
    parameters:
      python_version:
        description: "The python interpreter version we wish to test"
        default: "3.8.12"
        type: string
    executor:
      name: python-docker
      version: <<parameters.python_version>>
    steps:
      - checkout
      - run: python --version
      - run-tests

  build-documentation:
    description: Builds the documentation pages which can be hosted in an http web server.
    executor: python-docker
    steps:
      - checkout
      - install-tox
      - run:
          name: Install the 'Enchant' C library, which is a dependency of the spell check process
          command: sudo apt-get update && sudo apt-get install enchant
      - run:
          name: Build the documentation pages out of the *.rst documentation files
          command: tox -e docs -vv

  send-coverage-to-codacy:
    executor: java15-docker-image
    steps:
      - attach_workspace:
          at: .
      - run: curl --version
      - run: java --version
      - run:
          name: Send test data to codacy.com server
          command: |
            sudo apt-get install jq
            curl -LSs "$(curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(".jar"))) | .[0].browser_download_url')" -o codacy-coverage-reporter-assembly.jar
            java -jar codacy-coverage-reporter-assembly.jar report -l Python -r coverage.xml

  send-coverage-to-codecov:
    executor: ubuntu-1604-vm
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Upload the code coverage measurements, resulted from running the test suite (unit tests), to codecov.io
          command: |
            curl -s https://codecov.io/bash > .codecov
            chmod +x .codecov
            ./.codecov

  deploy-to-test-pypi:
    executor: python-docker
    steps:
      - checkout
      - install-tox
      - run:
          name: Check code to comply with best practices of Python packaging ecosystem (pypi, pip, etc)
          command: tox -e check -vv
      - run:
          name: Build the code and create .tar.gz and .whl files
          command: tox -e build -vv
      - run:
          name: Deploy package (source distro & wheel) to 'testpypi' (index) server
          command: tox -e deploy -vv
      - persist_to_workspace:
          root: .
          paths:
            - tests

  integration-test:
    executor: python-docker
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install the package from test.pypi.org
          command: pip install --no-deps --index-url https://test.pypi.org/simple/ software-patterns
      - run:
          name: Install pytest, which is used both in the test suite code and as a test runner
          command: pip install pytest
      - run:
          name: Run the test suite (unit-tests)
          command: pytest tests -v

  visualize_code:
    executor: python-docker
    steps:
      - checkout
      - run: sudo apt-get update -y --allow-releaseinfo-change
      - run: python -m pip install -U pip
      - run:
          name: Install the dot binary included in the graphviz package/distribution
          command: sudo apt-get install graphviz
      - install-tox
      - run:
          name: Visualize dependency graphs as .svg files
          command: tox -e pydeps -vv
      - store_artifacts:
          path: dependency-graphs
          destination: dep-graphs
      - run:
          name: Visualize uml diagrams as .svg files
          command: tox -vv -e uml -- svg
      - store_artifacts:
          path: uml-diagrams
          destination: uml-diagrams


workflows:
  version: 2
  build_accept:
    jobs:
      - build-n-test:
          matrix:
            parameters:
              python_version:
                - "3.6.15"
                - "3.7.12"
                # - "3.8.12"  # is the build-test-coverage job
                - "3.9.9"
                - "3.10"
                - "3.11.0"
          filters:
            branches:
              only:
                - master
                - dev
                - test-pypi

      - build-test-report:
          filters:
            tags:
              only: /.*/  # runs for all branches and all tags

      - send-coverage-to-codacy:
          requires:
            - build-test-report
          filters:
            tags:
              only: /.*/
      - send-coverage-to-codecov:
          requires:
            - build-test-report
          filters:
            tags:
              only: /.*/

      - visualize_code:
          filters:
            branches:
              only:
                - master
                - dev
                - visualize-code

      - build-documentation:
          filters:
            branches:
              only:
                - master
                - dev
                - docs
                - test-pypi

      - deploy-to-test-pypi:
          requires:
            - build-test-report
          filters:
            branches:
              only: test-pypi

      - integration-test:
          requires:
            - deploy-to-test-pypi
          filters:
            branches:
              only: test-pypi
